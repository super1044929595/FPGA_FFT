

fc=350;
N=1024;
fs=1024;
t=[0:1023]*0.01;
y=sin(2*pi*t*20)+5*sin(2*pi*t*fc)+sin(2*pi*t*102);
y_fftori=fft(y,N);
y_fft=abs(fft(y,N));
fk=(0:N/2-1)*fs/N;
plot(fk,y_fft(1:N/2));


for z=1:N/2
    power_y(z)=y_fft(z).* y_fft(z);
end
power_mean=mean(power_y);
%handle the squeak

%handle
M=500;
Fh= 399;
Fl= 300;
M_HAMMING=256;
kha=hamming(M_HAMMING);
y_k=filter(kha,1,y(300:399));
% y_k=y(300:399);
w=exp(-j*2*pi* (Fh-Fl)/M*fs);
a = exp(j*2*pi*Fl/fs);
Y_CZT=czt(y_k,M,w,a);
Y_CZT=czt(y_k,M);
Y_CZT=abs(Y_CZT);
% zplane([Y_CZT]);
%搜索监测点
z_offset=30;
Y_Max=1;
for z=z_offset:M/2
     if( Y_CZT(z)   > Y_Max )
         Y_Max=Y_CZT(z);
         Squeak_Point=z;    
     end
end
%结束监测点



fz=(0:M-1).*(Fh-Fl)/M+Fl;
squeak_index=Squeak_Point;
squeak_value=Y_Max;

figure;
subplot(1,2,1);
plot(abs(fft(Y_CZT)));
subplot(1,2,2);
plot(fz,Y_CZT,'*');
text(squeak_index+300,squeak_value,'The squeak point');

%滤波处理 2017-3-13
testfilter=squeakfilter;
y_new=filter(testfilter,y);
% y_new=zeros(N,1);
y_new_fft=fft(y_new,N);
y_new_fft=abs(fft(y_new,N));




            


#ifndef MUSIC_H
#define MUSIC_H
#include <QAudioDeviceInfo>
#include <QAudioOutput>
#include <QDebug>
#include <QVBoxLayout>
#include <qmath.h>
#include <qendian.h>
#include "qaudio.h"
#include "music.h"
#include "qfile.h"

class music
{
public:
    music();
    void play(void);
    QAudioOutput* audio; // class member.
    QFile sourceFile;   // class member.
signals:
    void handleStateChanged(QAudio::State newState);
};

#endif // MUSIC_H


//source

#include "music.h"
music::music()
{


       audio=new QAudioOutput; // class member.
       sourceFile.setFileName("D:\\1.wav");

       sourceFile.open(QIODevice::ReadOnly);

       QAudioFormat format;
       // Set up the format, eg.
       format.setSampleRate(44000);
       format.setChannelCount(2);
       format.setSampleSize(16);
       format.setCodec("audio/pcm");
       format.setByteOrder(QAudioFormat::LittleEndian);
       format.setSampleType(QAudioFormat::UnSignedInt);

       QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());
       if (!info.isFormatSupported(format)) {
           qWarning() << "Raw audio format not supported by backend, cannot play audio.";
           return;
       }

       audio = new QAudioOutput(format, NULL);
    //   connect(audio, SIGNAL(stateChanged(QAudio::State)), this, SLOT(handleStateChanged(QAudio::State)));

       audio->setVolume(15);
}
void music::play(void)
{
  audio->start(&sourceFile);
}

void music::handleStateChanged(QAudio::State newState)
{
    switch (newState) {
        case QAudio::IdleState:
            // Finished playing (no more data)
            audio->stop();
            sourceFile.close();
            delete audio;
            break;

        case QAudio::StoppedState:
            // Stopped for other reasons
            if (audio->error() != QAudio::NoError) {
                // Error handling
            }
            break;

        default:
            // ... other cases as appropriate
            break;
    }
}
